"/============================\"
"|.vimrc                      |"
"|Author: Alykhan Kanji       |"
"|Homepage: http://alykhan.com|"
"\============================/"

" Basics {{{
set nocompatible                " Be iMproved
" }}}

" Plugins {{{
" Vundle {{{
filetype off                    " required
" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'      " Plugin manager
" }}}

" Core Improvements {{{
Plugin 'tpope/vim-commentary'   " Comment lines with 'gcc'
Plugin 'tpope/vim-repeat'       " Repeat actions with '.'
Plugin 'tpope/vim-surround'     " Surround text with tags using 'ys{motion}'
Plugin 'vim-scripts/IndexedSearch' " Number search results
Plugin 'vim-scripts/matchit.zip' " Navigate between matching tags with '%'
Plugin 'bkad/CamelCaseMotion'   " Provide CamelCase and underscore motion through words
Plugin 'tpope/vim-endwise'      " Automatically close blocks
" }}}

" VCS {{{
Plugin 'tpope/vim-fugitive'     " Git integration
Plugin 'airblade/vim-gitgutter' " Show diff symbols in gutter
" }}}

" Status Line {{{
set noshowmode                  " Hide default mode indicator
set laststatus=2                " Always display status line
Plugin 'bling/vim-airline'      " Supercharged statusline
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts = 1
" }}}

" Language Support {{{
Plugin 'scrooloose/syntastic'   " Check syntax on save
Plugin 'jmcantrell/vim-virtualenv' " Provide virtualenv info and commands
Plugin 'tpope/vim-git'          " Git runtime files
Plugin 'Glench/Vim-Jinja2-Syntax' " Jinja2 runtime files
Plugin 'tpope/vim-liquid'       " Liquid runtime files
Plugin 'Keithbsmiley/swift.vim' " Swift runtime files
Plugin 'kchmck/vim-coffee-script' " CoffeeScript runtime files
" }}}

" Ctags {{{
Plugin 'majutsushi/tagbar'      " Interface for browsing and navigating tags
nnoremap <silent> <leader>t :TagbarToggle<CR>
Plugin 'xolox/vim-easytags'     " Update ctags on save
Plugin 'xolox/vim-misc'         " Required for vim-easytags
" }}}

" Autocomplete {{{
Plugin 'Valloric/YouCompleteMe' " Autocomplete for most programming languages
" }}}

" Snippets {{{
Plugin 'SirVer/ultisnips'       " Provide user-editable snippets via triggers
let g:UltiSnipsExpandTrigger="<C-j>"
" }}}

" Search {{{
Plugin 'ctrlpvim/ctrlp.vim'     " Search through files, recently used, buffers
let g:ctrlp_extensions = ['tag', 'buffertag'] " Also search through tags
" }}}

" All of your Plugins must be added before the following line
call vundle#end()               " required
filetype plugin indent on       " required
" }}}

" Basics {{{
set encoding=utf-8              " Set encoding to UTF-8
set showcmd                     " Display incomplete commands
set number                      " Show line numbers
set ruler                       " Show the current row and column
set cursorline                  " Highlight current line
" Remove underline and set cursorline color
highlight CursorLine cterm=NONE ctermbg=black
set linespace=4                 " Set line widths
set display+=lastline           " Display as much as possible of long lines
set scrolloff=10                " Scroll frame when close to top or bottom
set sidescrolloff=20            " Scroll frame when close to left or right
set sidescroll=1                " Set number of columns to scroll sideways at a time
set visualbell                  " Flash instead of beeping
set wildmenu                    " Show command-line completions in statusline
set autoread                    " Automatically reread externally changed files
set mouse=a                     " Allow mouse interaction, prevent scrolling console UI
set clipboard=unnamed           " Use system clipboard for yank and put
" }}}

" Whitespace {{{
set list                        " Show invisibles
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Choose characters to represent invisibles
" Only display trailing whitespace in modes other than Insert
augroup trailing
  au!
  au InsertEnter * :setlocal listchars-=trail:•
  au InsertLeave * :setlocal listchars+=trail:•
augroup END
set tabstop=2                   " Set literal tab width and display
set softtabstop=2               " Set tab width for insertion and <BS>
set shiftwidth=2                " Set CTRL-T, > (add indent) & CTRL-D, < (remove indent) widths
set expandtab                   " Ensure tabs are expanded to spaces
set smarttab                    " Insert shiftwidth tabs at start of line, softtabstop tabs elsewhere
set shiftround                  " Round indents to multiples of shiftwidth
set autoindent                  " Enable autoindentation for new lines to match indent level of previous line
set smartindent                 " Automatically indent lines after opening braces
set cindent                     " Enable indenting for C-style source code (including C++ and Java)
set backspace=indent,eol,start  " Backspace through everything in insert mode
" }}}

" Wrapping {{{
set linebreak                   " Wrap only at word boundaries
set breakindent                 " Indent wrapped portion of lines to matching level
set showbreak=↪                 " Use character to indicate wrapped lines
set colorcolumn=+1              " Highlight the column after `textwidth`
" Disabled Format Options {{{
" t: Auto-wrap text using textwidth
set formatoptions-=t
" r: Automatically insert the current comment leader after hitting <Enter> in Insert mode
set formatoptions-=r
" o: Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode
set formatoptions-=o
" }}}
" Enabled Format Options {{{
" j: Where it makes sense, remove a comment leader when joining lines
set formatoptions+=j
" }}}
" Set colorcolumn highlight color to black
highlight ColorColumn ctermbg=black
" }}}

" Searching {{{
set hlsearch                    " Highlight search terms...
set incsearch                   " ...dynamically as they are typed
set ignorecase                  " Ignore case when searching...
set smartcase                   " ...except when at least one uppercase letter is included
" Clear search highlights by pressing return
nnoremap <silent> <CR> :nohlsearch<CR>
" }}}

" Folding {{{
set foldmethod=indent           " Enable code folding based on indentation
set foldcolumn=3                " Set width of column containing fold info
set foldlevelstart=20           " Load files with open folds
" Use <Space> to toggle folds
nnoremap <Space> za
vnoremap <Space> za
" }}}

" Splits {{{
" Sets the default splitting to be to the bottom and to the right
set splitbelow
set splitright
" }}}

" Colorscheme {{{
set background=dark
highlight clear FoldColumn
highlight clear SignColumn
" }}}

" Syntax {{{
syntax enable                   " Enable syntax highlighting
set showmatch                   " Highlight matching braces
set synmaxcol=200               " Limit syntax highlighting by column number
" }}}

" Temporary Files {{{
set undofile                    " Persist undo tree across launches
" Store temporarily files globally instead of in working directory
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
set undodir=~/.vim/tmp/undo
" Make directories automatically if nonexistent
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
" }}}

" Mappings {{{
let mapleader = ","             " Map comma as leader key
" Quickly edit configuration files
nnoremap <leader>ev :e $MYVIMRC<CR> " `~/.vimrc`
nnoremap <leader>eb :e ~/.bash_profile<CR>
nnoremap <leader>eg :e ~/.gitconfig<CR>
" By default `j` and `k` both move in a file by lines delimited by `\n` which
" is not helpful when linewrapping is enabled. These mappings ensure that I
" move up and down by display lines and not just lines delimited by `\n`.
noremap j gj
noremap k gk
" In order to not lose the original functionality of the `j` and `k` keys I
" map their functionality to `gj` and `gk` respectively.
noremap gj j
noremap gk k
" Reformat JSON to pretty print format
nnoremap <leader>j :%!python -m json.tool<CR>
" }}}

" User Commands {{{
" Allow accidental uppercase versions of common file commands
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
" }}}

" vim:fdm=marker
