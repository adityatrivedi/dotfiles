# Functions {{{
### Retrieve current virtualenv info
function get_virtualenv() {
  [[ -n "$VIRTUAL_ENV" ]] && echo "($(basename "$VIRTUAL_ENV"))"
}

### Set flags for converting GitHub Markdown to HTML5 with Pandoc
function pandocmark() {
  [[ "$#" -eq 1 ]] || { echo "Usage: pandocmark infile.md"; return; }
  infile=$1
  outfile=$(basename "$infile")
  outfile=${outfile%.*}.html
  pandoc -f markdown_github -t html5 --smart -s "$infile" -o "$outfile"
  open "$outfile"
}
# }}}

# Options {{{
### Use emacs line editing mode
bindkey -e
### Enable smart directory navigation
setopt auto_cd
### Allow comments in interactive session
setopt interactivecomments
### Delete path segments separately with ^-W or ⌥-⌫
autoload -Uz select-word-style && select-word-style bash
# }}}

# Exports {{{
export CLICOLOR=1
export EDITOR="vim"
# }}}

# Tab Completion {{{
### Enable Git prompt
GIT_PROMPT="/usr/local/etc/bash_completion.d/git-prompt.sh"
[[ -f "$GIT_PROMPT" ]] && source "$GIT_PROMPT"
### Enable Homebrew completion
if hash brew 2>/dev/null; then
  ln -hfs "`brew --repository`/Library/Contributions/brew_zsh_completion.zsh" /usr/local/share/zsh/site-functions/_brew
fi

### Enable tab completions
fpath=(/usr/local/share/zsh/site-functions $fpath)
autoload -Uz compinit && compinit
### Allow case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
### Colorize completions
zstyle ':completion:*' list-colors ''
### Highlight matching completion
zstyle ':completion:*:*:*:*:*' menu select
### Enable completions on dotfiles
_comp_options+=(globdots)
### Enable completion from the middle of a word
setopt complete_in_word
### Use Shift-Tab to move backwards in completion list
bindkey '^[[Z' reverse-menu-complete
### Use history substring search
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
# }}}

# Prompt {{{
# Git PS1 Options {{{
# * indicates repo with unstaged changes
# + indicates repo with staged changes
GIT_PS1_SHOWDIRTYSTATE=1

# $ indicates repo with stashed changes
GIT_PS1_SHOWSTASHSTATE=1

# % indicates repo with untracked files
GIT_PS1_SHOWUNTRACKEDFILES=1

# show difference between HEAD and its upstream
# "<" indicates you are behind
# ">" indicates you are ahead
# "<>" indicates you have diverged
# "=" indicates that there is no difference
GIT_PS1_SHOWUPSTREAM="auto git"

# see more information about the identity of commits checked out as a detached HEAD
GIT_PS1_DESCRIBE_STYLE="branch"

# colored hint about the current dirty state
GIT_PS1_SHOWCOLORHINTS=1
# }}}

c_clear=%f
c_red=%F{red}
c_blue=%F{blue}

function test_exit() {
  local exit=$?
  [[ $exit -eq 0 ]] && echo "$c_blue" || echo "$c_red"
}

# Display path, git info, and prompt character
precmd() {
  color=$(test_exit)
  ### put the current directory in title bar
  print -Pn "\e]2;%~\a"
  __git_ps1 "$(get_virtualenv)$color%~$c_clear" " $color%#$c_clear "
}
# }}}

# Aliases {{{
### Enable colourized output for listing directory contents, append '/' to directories, and extra symbols after various filetypes for differentiation
alias ls='ls -FAh'

### Alias cat to [ccat](https://github.com/jingweno/ccat)
hash ccat 2>/dev/null && alias cat='ccat'

### Alias find to [ffind](https://github.com/sjl/friendly-find)
hash ffind 2>/dev/null && alias find='ffind'

### Create shorthand for git
alias g='git'

### Alias git to [hub](https://hub.github.com)
hash hub 2>/dev/null && eval "$(hub alias -s)"

### Launch iOS Simulator
SIMULATOR='/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app/'
alias ios='open "$SIMULATOR"'

### Pretty print JSON
alias json='python -m json.tool'

### Initialize [fasd](https://github.com/clvv/fasd)
hash fasd 2>/dev/null && eval "$(fasd --init auto)"
# }}}

# Extras {{{
### Use ~/.localrc to extend ~/.zshrc with custom options
if [[ -f ~/.localrc ]]; then
  source ~/.localrc
fi
# }}}

# vim:ft=sh:fdm=marker
